for(k in 1:1000){
sticks = array_3dnon[k,j,i]
if(sticks > -1){
count = count + 1
print(count)
}
}
result = (count - 1)/1000
print(result)
falsepositive_mat[i,j] = result
}
}
non_fpr_mat <- falsepositive_mat
View(non_fpr_mat)
View(non_fpr_mat)
falsepositive_mat = matrix(1:88,nrow = 11,ncol = 8)
for (i in 1:11){
population = pop_vec[i]
for(j in 1:8){
contrib = j
count=1
#sticks is iterations
#sticks = array_3d[,j,i]
for(k in 1:1000){
sticks = array_3dnon[k,j,i]
if(sticks > -1){
count = count + 1
print(count)
}
}
result = (count - 1)/1000
print(result)
falsepositive_mat[i,j] = result
}
}
non_fpr_mat <- falsepositive_mat
View(non_fpr_mat)
falsepositive_mat = matrix(1:88,nrow = 11,ncol = 8)
for (i in 1:11){
population = pop_vec[i]
for(j in 1:8){
contrib = j
count=1
#sticks is iterations
#sticks = array_3d[,j,i]
for(k in 1:1000){
sticks = array_3dnon[k,j,i]
if(sticks > -1){
count = count + 1
print(count)
}
}
result = (count - 1)/1000
print(result)
falsepositive_mat[i,j] = result
}
}
falsepositive_mat = matrix(1:88,nrow = 11,ncol = 8)
for (i in 1:11){
population = pop_vec[i]
for(j in 1:8){
contrib = j
count=1
#sticks is iterations
#sticks = array_3d[,j,i]
for(k in 1:1000){
sticks = array_3dnon[k,j,i]
if(sticks > -1){
count = count + 1
print(count)
}
}
result = (count - 1)/1000
print(result)
falsepositive_mat[i,j] = result
}
}
falsepositive_mat = matrix(1:88,nrow = 11,ncol = 8)
for (i in 1:11){
population = pop_vec[i]
for(j in 1:8){
contrib = j
count=1
#sticks is iterations
#sticks = array_3d[,j,i]
for(k in 1:1000){
sticks = array_3dnon[k,j,i]
if(sticks > -1){
count = count + 1
print(count)
}
}
result = (count - 1)/1000
print(result)
falsepositive_mat[i,j] = result
}
}
View(non_fpr_mat)
non_fpr_mat <- falsepositive_mat
iterations = 1:8
colnames(non_fpr_mat) <- iterations
rownames(non_fpr_mat) <- pop_vec2
non_fpr_mat
View(non_fpr_mat)
write.csv(non_fpr_mat, "truecontrib_mat.csv")
write.csv(non_fpr_mat, "noncontrib_mat.csv")
#This is all naming schemes for the matrix row and columns
iterations = 1:8
colnames(true_fpr_mat) <- iterations
rownames(true_fpr_mat) <- pop_vec2
true_fpr_mat
#Write the Matrix to a CSV
write.csv(true_fpr_mat, "truecontrib_mat.csv")
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","Caucasian.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
setwd("~/Desktop/Research")
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","Caucasian.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
setwd("~/Desktop/Research/aim1/formatted CSV files from paper")
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","Caucasian.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
# empty matrix that we will use to
hetero_mat <- matrix(exp_hvec,nrow = 11, ncol = length(loci_vec))
#assgns the col name to the matrix from the freq vector (changes)
colnames(hetero_mat) <- loci_vec
#asigns the row name to the matrix (changes)
rownames(hetero_mat) <- freq_vec
#Calculate average expected heterozygosity for each population
hetero_mat
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","Caucasian.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
#################################### Working Matrix (Friday w/ Maria) 2/22/19 ################################################################
library(readr)
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","Caucasian.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","white.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trini.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
#vector that holds the 11 populations in it
freq_vec <- c("Afri_paper.csv","Apache.csv","Bahamian.csv","white.csv","Chamorro.csv","Filipino.csv",
"Jamaican.csv","Navajo.csv","seh.csv","swh.csv","Trinidadian.csv")
loci_vec <- c("FGA","TPOX","CSF1PO","TH01","D8S1179","D3S1358","D7S820","D16S539",
"D21S11","D2S1338","D19S433",
"vWA","D18S51")
#intiates the vector that holds all exp heterozygosity values
exp_hvec <- c()
#loop that iterates through the 13 loci in Loci_vec
for (k in 1:length(loci_vec)){
current_loci <- loci_vec[k]
#loop iterates through each CSV file
for( j in 1:length(freq_vec)){
file_name <- read_csv(freq_vec[j])
file_mat <- as.matrix(file_name)
#loop iterates through colums of file and checks if it matches current loci
for (i in 2:dim(file_mat)[2]){
name =  colnames(file_mat)[i]
if(name == current_loci){
loci_vector <- file_mat[,i]
isthere = !is.na(loci_vector)
isthere_loci <- loci_vector[isthere]
print(isthere_loci)
#work on the math
loci_sqrd <- as.numeric(isthere_loci)^2
#print(loci_sqrd)
loci_sum <- sum(loci_sqrd)
#print(loci_sum)
#print(sigma_eq)
exp_hetero <- (1 -(loci_sum))
exp_hvec <- c(exp_hvec,exp_hetero)
print(paste("heterozygosity for locus  ",loci_vec[k],"for pop ",freq_vec[j], "is ",exp_hetero))
}
}
}
}
exp_hvec
# empty matrix that we will use to
hetero_mat <- matrix(exp_hvec,nrow = 11, ncol = length(loci_vec))
#assgns the col name to the matrix from the freq vector (changes)
colnames(hetero_mat) <- loci_vec
#asigns the row name to the matrix (changes)
rownames(hetero_mat) <- freq_vec
#Calculate average expected heterozygosity for each population
hetero_mat
mean(hetero_mat[1,])
mean(hetero_mat[1,])
hetero_mat[1,]
hetero_mat
#Calculate average expected heterozygosity for each population
hetero_mat[1,]
hetero_mat[2,]
mean_vec <- c()
for( i in hetero_mat){
mean_vec <- mean(hetero_mat[i,])
print(mean_vec)
}
for( i in hetero_mat){
mean(hetero_mat[i,])
print(mean)
}
#Calculate average expected heterozygosity for each population
mean(hetero_mat[1,])
for( i in hetero_mat){
mean_var <- mean(hetero_mat[i,])
print(mean_var)
}
length(hetero_mat)
dim(hetero_mat)
for( i in hetero_mat){
mean_var <- mean(hetero_mat[i,])
print(mean_var)
}
for( i in 1:length(hetero_mat){
for( i in 1:length(hetero_mat)){
mean_var <- mean(hetero_mat[i,])
print(mean_var)
}
#Calculate average expected heterozygosity for each population
mean(hetero_mat[1,])
hetero_mat[2,]
mean_vec <- c()
for( i in 1:length(hetero_mat)){
mean_vec <- mean(hetero_mat[i,])
print(mean_var)
}
mean_vec <- c()
for( i in 1:length(hetero_mat)){
mean_vec <- mean(hetero_mat[i,])
print(mean_vec)
}
mean_vec
mean_vec <- c()
for( i in 1:length(hetero_mat)){
mean_exp <- mean(hetero_mat[i,])
mean_vec <-c(mean_vec,mean_exp)
}
mean_vec <- c()
mean_vec
mean_vec <- c(1:11)
mean_vec
for( i in 1:length(hetero_mat)){
mean_exp <- mean(hetero_mat[i,])
mean_vec <-c(mean_vec,mean_exp)
}
mean_vec <- c()
for( i in 1:length(hetero_mat)){
mean_exp <- mean(hetero_mat[i,])
print(mean_exp)
mean_vec <-c(mean_vec,mean_exp)
}
mean_vec
length(mean)
length(mean_vec)
write.csv(hetero_mat,mean_vec,"exphetero.csv")
mean_vec
as.matrix(mean_vec)
exphetero_mat <- as.matrix(mean_vec)
exphetero_mat <- as.matrix(mean_vec)
colnames(exphetero_mat) <- loci_vec
#asigns the row name to the matrix (changes)
rownames(exp_hetero) <- freq_vec
#asigns the row name to the matrix (changes)
rownames(exphetero_mat) <- freq_vec
# turns the vector into a matrix
exphetero_mat <- as.matrix(mean_vec)
colnames(Average Expected Heterozygosity) <- loci_vec
# turns the vector into a matrix
exphetero_mat <- as.matrix(mean_vec)
colnames(exphetero_mat) <- Average Expected Heterozygosity
colnames(exphetero_mat) <- "Average Expected Heterozygosity"
#asigns the row name to the matrix (changes)
rownames(exphetero_mat) <- freq_vec
View(exphetero_mat)
#asigns the row name to the matrix (changes)
rownames(exphetero_mat) <- pop_vec2
View(exphetero_mat)
View(hetero_mat)
#asigns the row name to the matrix (changes)
rownames(hetero_mat) <- pop_vec2
write_csv(hetero_mat,"ExpectedHetero.csv")
write.csv(hetero_mat,"ExpectedHetero.csv")
getwd()
exphetero_mat
getwd()
setwd("~/Desktop/Research")
write.csv(exphetero_mat,"Average_Expected_Hetero.csv")
#This is the vector used to make the different colored lines for all of the populations
colorvec = c( "blue","red","green","purple","violet","yellow","pink","black")
#This intiates the plot
plot(x=c(),y=c(),xlim = c(1,8),ylim = c(0,.10),main ="Average False Positive Rate (1000 iterations)",ylab = "average false postive rate", xlab =
"number of contributors")
#this loop adds points onto the intiated plot with i reffering to the location in the matrix
for(i in 1:8){
points(non_fpr_mat[i,], col= colorvec[i], lty=1)
points(true_fpr_mat[i,], col=colorvec[i],lty=1)
}
legend("center", legend=c("AA","Apache","Bahamian","White","Chamorro","Filipino",
"Jamaican","Navajo","SEH","SWH","Trinidadian"),
col=c( "blue","red","green","purple","violet","yellow","pink","black"), lty=1:2, cex=0.8)
plot.new()
plot.new()
#This intiates the plot
plot(x=c(),y=c(),xlim = c(1,8),ylim = c(0,.10),main ="Average False Positive Rate (1000 iterations)",ylab = "average false postive rate", xlab =
"number of contributors")
#this loop adds points onto the intiated plot with i reffering to the location in the matrix
for(i in 1:8){
points(non_fpr_mat[i,], col= colorvec[i], lty=1)
points(true_fpr_mat[i,], col=colorvec[i],lty=1)
}
legend("center", legend=c("AA","Apache","Bahamian","White","Chamorro","Filipino",
"Jamaican","Navajo","SEH","SWH","Trinidadian"),
col=c( "blue","red","green","purple","violet","yellow","pink","black"), lty=1:2, cex=0.8)
View(non_fpr_mat)
View(true_fpr_mat)
#This is the vector used to make the different colored lines for all of the populations
colorvec = c( "blue","red","green","purple","violet","yellow","pink","black")
#This intiates the plot
plot(x=c(),y=c(),xlim = c(1,8),ylim = c(0,.10),main ="Average False Positive Rate (1000 iterations)",ylab = "average false postive rate", xlab =
"number of contributors")
#this loop adds points onto the intiated plot with i reffering to the location in the matrix
for(i in 1:8){
points(non_fpr_mat[i,], col= colorvec[i], lty=1)
points(true_fpr_mat[i,], col=colorvec[i],lty=1)
}
legend("center", legend=c("AA","Apache","Bahamian","White","Chamorro","Filipino",
"Jamaican","Navajo","SEH","SWH","Trinidadian"),
col=c( "blue","red","green","purple","violet","yellow","pink","black"), lty=1:2, cex=0.8)
#This is how many plots per row,column
par(mfrow=c(1,1))
plot.new()
#This is how many plots per row,column
par(mfrow=c(1,1))
#This intiates the plot
plot(x=c(),y=c(),xlim = c(1,8),ylim = c(0,.10),main ="Average False Positive Rate (1000 iterations)",ylab = "average false postive rate", xlab =
"number of contributors")
#this loop adds points onto the intiated plot with i reffering to the location in the matrix
for(i in 1:8){
points(non_fpr_mat[i,], col= colorvec[i], lty=1)
points(true_fpr_mat[i,], col=colorvec[i],lty=1)
}
legend("center", legend=c("AA","Apache","Bahamian","White","Chamorro","Filipino",
"Jamaican","Navajo","SEH","SWH","Trinidadian"),
col=c( "blue","red","green","purple","violet","yellow","pink","black"), lty=1:2, cex=0.8)
