singleLR_vector <- c(singleLR_vector,single_LR$LR)
k = k + 1
#end of  while (k < 14)
}
singleLR_vector
noncontrib.LR.vector[j] <- prod(singleLR_vector)
noncontrib.LR.vector
j
j=2
while (j < num_sims){
genos.in.mix <- simugeno(tab = pop.afs,
n = num_contribs,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
sim.mix <- simumix(genos.in.mix,
ncontri = num_contribs
)
noncon.sus <- simugeno(tab = pop.afs,
n =  1,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
singleLR_vector <- c()
#############################
### non contributors == 1+ ##
#############################
k = 1
#set.seed(657)
while (k < 14){
known.contrib.all.atk.pros <- c()
if(num_contribs == 1){
known.contrib.all.atk.pros = as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]])
} else {
for(i in 1:(num_contribs - 1)){
known.contrib.all.atk.pros = c( known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k],
"/")[[1]])
)
}
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]]))
}
known.contrib.all.atk.def = c()
if(num_contribs == 1){
known.contrib.all.atk.def = 0
} else {
for (i in 1:(num_contribs - 1)){
known.contrib.all.atk.def = c(known.contrib.all.atk.def,
as.numeric(strsplit(sim.mix$mix.prof[i, k], "/")[[1]])
)
}
}
#############################
### non contrib Single_LR ##
#############################
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
while(is.na(single_LR$LR) || is.infinite(single_LR$LR) || is.nan(single_LR$LR) || single_LR$LR<0){
print(paste("in while loop", k))
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
}
singleLR_vector <- c(singleLR_vector,single_LR$LR)
k = k + 1
#end of  while (k < 14)
}
#end of else, for more than 1 contributor
}
j
#set.seed(657)
while (k < 14){
known.contrib.all.atk.pros <- c()
if(num_contribs == 1){
known.contrib.all.atk.pros = as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]])
} else {
for(i in 1:(num_contribs - 1)){
known.contrib.all.atk.pros = c( known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k],
"/")[[1]])
)
}
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]]))
}
known.contrib.all.atk.def = c()
if(num_contribs == 1){
known.contrib.all.atk.def = 0
} else {
for (i in 1:(num_contribs - 1)){
known.contrib.all.atk.def = c(known.contrib.all.atk.def,
as.numeric(strsplit(sim.mix$mix.prof[i, k], "/")[[1]])
)
}
}
#############################
### non contrib Single_LR ##
#############################
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
while(is.na(single_LR$LR) || is.infinite(single_LR$LR) || is.nan(single_LR$LR) || single_LR$LR<0){
print(paste("in while loop", k))
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
}
singleLR_vector <- c(singleLR_vector,single_LR$LR)
k = k + 1
#end of  while (k < 14)
}
singleLR_vector
noncontrib.LR.vector[j] <- prod(singleLR_vector)
noncontrib.LR.vector
return(noncontrib.LR.vector)
###########################
#### START OF FUNCTION ####
###########################
LR_calculator <- function(file.name, num_contribs, num_sims, is.a.truecontrib){
# set.seed(657)
# We have to use this particular seed for reproduceability
set.seed (123560)
#reads in the files we are working with
afs_csv <- read.csv(file.name)
#####tabfreq makes an onject that holds the following information###
# @TAB function reads in all the allele frequencies per loci
# @which.loc reports the loci that are taken into consderation
# @pop.names are right now just reads "population" but will try to change it to the actual population (Changed)
pop.afs <- tabfreq(tab = afs_csv,
pop.names = as.factor(file.name)
)
# This is where the LRs from each iteration is stored
truecontrib.LR.vec <- c()
noncontrib.LR.vector <- c()
##############################
### true contributor code ####
##############################
if (is.a.truecontrib == 0){
j = 1
#I think this should be <=
while (j < num_sims){
#######simugeno objects store genotypes from the tabfreq ###########
#popgen$tab.geno gives the genotyprs of all individuals (n)
sim.genotypes <- simugeno(tab = pop.afs,
n = num_contribs,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
#simulate a mixture using the simulated genotypes
sim.mix <- simumix(sim.genotypes,
ncontri = num_contribs
)
singleLR_vector <- c()
k = 1
while (k < 14){
known.contrib.all.atk.pros = c()
for(i in 1:num_contribs){
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k], "/")[[1]])
)
}
if   (num_contribs == 1){
known.contrib.all.atk.def = 0
} else {known.contrib.all.atk.def = c()
for (i in 1:(num_contribs - 1)){
known.contrib.all.atk.def = c(known.contrib.all.atk.def,
as.numeric(strsplit(sim.mix$mix.prof[i, k], "/")[[1]])
)
}
}
known.noncontrib.all.atk.def <-  as.numeric(strsplit(sim.mix$mix.prof[num_contribs, k], "/")[[1]])
##############################
### True contrib Single_LR ####
##############################
single_LR <<- LR( Repliste = c(sim.mix@mix.all[[k]]),
Tp = c(known.contrib.all.atk.pros),
## Vd = Non contrib under Hd - Suspect ##
Td = c(known.contrib.all.atk.def),
Vp = 0,
## Vp = Non contrib under Hp - 0 ##
Vd = known.noncontrib.all.atk.def,
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
#######################################
##### True Contrib Infinity loop #######
######################################
while(is.na(single_LR$LR) || is.infinite(single_LR$LR) || is.nan(single_LR$LR) || single_LR$LR<0){
single_LR <<- LR( Repliste = c(sim.mix@mix.all[[k]]),
Tp = c(known.contrib.all.atk.pros),
## Vd = Non contrib under Hd - Suspect ##
Td = c(known.contrib.all.atk.def),
#tells Dorothy to return the last two digits of vector (dont think we need the strsplit commands)
Vp = 0,
## Vp = Non contrib under Hp - 0 ##
Vd = known.noncontrib.all.atk.def,
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
#end of while(is.na(single_LR$LR) || is.infinite(single_LR$LR) || is.nan(single_LR$LR) || single_LR$LR<0)
}
singleLR_vector <- c(singleLR_vector,single_LR$LR)
k = k + 1
#end of while (k < 14), for LR calculation
}
# Adds the LR for this sim to the log10_LR vector
truecontrib.LR.vec[j] <- log10(prod(singleLR_vector))
j = j + 1
#end of while (j < num_sims)
}
#end of if (is.a.truecontrib == 0)
}
##########################
### non contributors #####
##########################
else if (is.a.truecontrib == 1){
j = 1
while (j < num_sims){
genos.in.mix <- simugeno(tab = pop.afs,
n = num_contribs,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
sim.mix <- simumix(genos.in.mix,
ncontri = num_contribs
)
noncon.sus <- simugeno(tab = pop.afs,
n =  1,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
singleLR_vector <- c()
#############################
### non contributors == 1+ ##
#############################
k = 1
#set.seed(657)
while (k < 14){
known.contrib.all.atk.pros <- c()
if(num_contribs == 1){
known.contrib.all.atk.pros = as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]])
} else {
for(i in 1:(num_contribs - 1)){
known.contrib.all.atk.pros = c( known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k],
"/")[[1]])
)
}
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]]))
}
known.contrib.all.atk.def = c()
if(num_contribs == 1){
known.contrib.all.atk.def = 0
} else {
for (i in 1:(num_contribs - 1)){
known.contrib.all.atk.def = c(known.contrib.all.atk.def,
as.numeric(strsplit(sim.mix$mix.prof[i, k], "/")[[1]])
)
}
}
#############################
### non contrib Single_LR ##
#############################
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
while(is.na(single_LR$LR) || is.infinite(single_LR$LR) || is.nan(single_LR$LR) || single_LR$LR<0){
print(paste("in while loop", k))
single_LR <- LR( Repliste = c(sim.mix$mix.all[[k]]),
Tp = known.contrib.all.atk.pros,
Td = known.contrib.all.atk.def,
Vp = 0,
#Vd = known.noncontrib is noncon.sus
Vd = as.numeric(strsplit(noncon.sus$tab.geno[1,k],"/")[[1]]),
xd = 1,
xp = 0,
theta = 0,
prDHet = c(0.2,0.2),
prDHom = c(0.04,0.04),
prC = 0,
freq = pop.afs@tab[[1]][[loci.names.inorder[k]]]
)
}
singleLR_vector <- c(singleLR_vector,single_LR$LR)
k = k + 1
#end of  while (k < 14)
}
#end of else, for more than 1 contributor
}
noncontrib.LR.vector[j] <- prod(singleLR_vector)
j = j + 1
#end of while (j < num_sims), which loops over num_sims
}
return(truecontrib.LR.vec)
return(noncontrib.LR.vector)
}
LRs <- LR_calculator("USHisp.8_new.csv", 2, 10, 1)
LRs <- LR_calculator("USHisp.8_new.csv", 2, 10, 1)
LRs
true.array_3d
genos.in.mix <- simugeno(tab = pop.afs,
n = num_contribs,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
sim.mix <- simumix(genos.in.mix,
ncontri = num_contribs
)
noncon.sus <- simugeno(tab = pop.afs,
n =  1,
which.loc = c("CSF1PO",
"D3S1358",
"D5S818",
"D7S820",
"D8S1179",
"D13S317",
"D16S539",
"D18S51",
"D21S11",
"FGA",
"TH01",
"TPOX",
"VWA"
)
)
singleLR_vector <- c()
num_contribs = 1
known.contrib.all.atk.pros <- c()
if(num_contribs == 1){
known.contrib.all.atk.pros = as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]])
} else {
for(i in 1:(num_contribs - 1)){
known.contrib.all.atk.pros = c( known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k],
"/")[[1]])
)
}
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]]))
}
k=1
singleLR_vector <- c()
known.contrib.all.atk.pros <- c()
if(num_contribs == 1){
known.contrib.all.atk.pros = as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]])
} else {
for(i in 1:(num_contribs - 1)){
known.contrib.all.atk.pros = c( known.contrib.all.atk.pros,
as.numeric(strsplit(sim.mix$mix.prof[i,k],
"/")[[1]])
)
}
known.contrib.all.atk.pros = c(known.contrib.all.atk.pros,as.numeric(strsplit(noncon.sus$tab.geno[1,k],
"/")[[1]]))
}
known.contrib.all.atk.pros
known.contrib.all.atk.def = c()
if(num_contribs == 1){
known.contrib.all.atk.def = 0
} else {
for (i in 1:(num_contribs - 1)){
known.contrib.all.atk.def = c(known.contrib.all.atk.def,
as.numeric(strsplit(sim.mix$mix.prof[i, k], "/")[[1]])
)
}
}
known.contrib.all.atk.def
